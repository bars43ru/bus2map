// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package transport_type

import (
	"fmt"
	"strings"
)

const (
	// TypeBUS is a Type of type BUS.
	TypeBUS Type = iota
	// TypeTROLLEYBUS is a Type of type TROLLEYBUS.
	TypeTROLLEYBUS
	// TypeTRAMWAY is a Type of type TRAMWAY.
	TypeTRAMWAY
	// TypeMINIBUS is a Type of type MINIBUS.
	TypeMINIBUS
)

var ErrInvalidType = fmt.Errorf("not a valid Type, try [%s]", strings.Join(_TypeNames, ", "))

const _TypeName = "BUSTROLLEYBUSTRAMWAYMINIBUS"

var _TypeNames = []string{
	_TypeName[0:3],
	_TypeName[3:13],
	_TypeName[13:20],
	_TypeName[20:27],
}

// TypeNames returns a list of possible string values of Type.
func TypeNames() []string {
	tmp := make([]string, len(_TypeNames))
	copy(tmp, _TypeNames)
	return tmp
}

// TypeValues returns a list of the values for Type
func TypeValues() []Type {
	return []Type{
		TypeBUS,
		TypeTROLLEYBUS,
		TypeTRAMWAY,
		TypeMINIBUS,
	}
}

var _TypeMap = map[Type]string{
	TypeBUS:        _TypeName[0:3],
	TypeTROLLEYBUS: _TypeName[3:13],
	TypeTRAMWAY:    _TypeName[13:20],
	TypeMINIBUS:    _TypeName[20:27],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Type{
	_TypeName[0:3]:                    TypeBUS,
	strings.ToLower(_TypeName[0:3]):   TypeBUS,
	_TypeName[3:13]:                   TypeTROLLEYBUS,
	strings.ToLower(_TypeName[3:13]):  TypeTROLLEYBUS,
	_TypeName[13:20]:                  TypeTRAMWAY,
	strings.ToLower(_TypeName[13:20]): TypeTRAMWAY,
	_TypeName[20:27]:                  TypeMINIBUS,
	strings.ToLower(_TypeName[20:27]): TypeMINIBUS,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}

// MarshalText implements the text marshaller method.
func (x Type) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Type) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
