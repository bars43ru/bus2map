// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: api/proto/bustracking.proto

package bustracking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusTrackingService_StreamGPSData_FullMethodName         = "/BusTrackingService/StreamGPSData"
	BusTrackingService_StreamBusTrackingInfo_FullMethodName = "/BusTrackingService/StreamBusTrackingInfo"
)

// BusTrackingServiceClient is the client API for BusTrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusTrackingServiceClient interface {
	// Поток для получения сырых GPS-данных автобусов
	StreamGPSData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GPSData, StreamGPSDataResponse], error)
	// Поток для получения обогащенных данных о автобусе и маршруте
	StreamBusTrackingInfo(ctx context.Context, in *StreamBusDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BusTrackingInfo], error)
}

type busTrackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusTrackingServiceClient(cc grpc.ClientConnInterface) BusTrackingServiceClient {
	return &busTrackingServiceClient{cc}
}

func (c *busTrackingServiceClient) StreamGPSData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GPSData, StreamGPSDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BusTrackingService_ServiceDesc.Streams[0], BusTrackingService_StreamGPSData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GPSData, StreamGPSDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BusTrackingService_StreamGPSDataClient = grpc.ClientStreamingClient[GPSData, StreamGPSDataResponse]

func (c *busTrackingServiceClient) StreamBusTrackingInfo(ctx context.Context, in *StreamBusDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BusTrackingInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BusTrackingService_ServiceDesc.Streams[1], BusTrackingService_StreamBusTrackingInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBusDataRequest, BusTrackingInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BusTrackingService_StreamBusTrackingInfoClient = grpc.ServerStreamingClient[BusTrackingInfo]

// BusTrackingServiceServer is the server API for BusTrackingService service.
// All implementations must embed UnimplementedBusTrackingServiceServer
// for forward compatibility.
type BusTrackingServiceServer interface {
	// Поток для получения сырых GPS-данных автобусов
	StreamGPSData(grpc.ClientStreamingServer[GPSData, StreamGPSDataResponse]) error
	// Поток для получения обогащенных данных о автобусе и маршруте
	StreamBusTrackingInfo(*StreamBusDataRequest, grpc.ServerStreamingServer[BusTrackingInfo]) error
	mustEmbedUnimplementedBusTrackingServiceServer()
}

// UnimplementedBusTrackingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusTrackingServiceServer struct{}

func (UnimplementedBusTrackingServiceServer) StreamGPSData(grpc.ClientStreamingServer[GPSData, StreamGPSDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGPSData not implemented")
}
func (UnimplementedBusTrackingServiceServer) StreamBusTrackingInfo(*StreamBusDataRequest, grpc.ServerStreamingServer[BusTrackingInfo]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBusTrackingInfo not implemented")
}
func (UnimplementedBusTrackingServiceServer) mustEmbedUnimplementedBusTrackingServiceServer() {}
func (UnimplementedBusTrackingServiceServer) testEmbeddedByValue()                            {}

// UnsafeBusTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusTrackingServiceServer will
// result in compilation errors.
type UnsafeBusTrackingServiceServer interface {
	mustEmbedUnimplementedBusTrackingServiceServer()
}

func RegisterBusTrackingServiceServer(s grpc.ServiceRegistrar, srv BusTrackingServiceServer) {
	// If the following call panics, it indicates UnimplementedBusTrackingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusTrackingService_ServiceDesc, srv)
}

func _BusTrackingService_StreamGPSData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BusTrackingServiceServer).StreamGPSData(&grpc.GenericServerStream[GPSData, StreamGPSDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BusTrackingService_StreamGPSDataServer = grpc.ClientStreamingServer[GPSData, StreamGPSDataResponse]

func _BusTrackingService_StreamBusTrackingInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBusDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BusTrackingServiceServer).StreamBusTrackingInfo(m, &grpc.GenericServerStream[StreamBusDataRequest, BusTrackingInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BusTrackingService_StreamBusTrackingInfoServer = grpc.ServerStreamingServer[BusTrackingInfo]

// BusTrackingService_ServiceDesc is the grpc.ServiceDesc for BusTrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusTrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BusTrackingService",
	HandlerType: (*BusTrackingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGPSData",
			Handler:       _BusTrackingService_StreamGPSData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamBusTrackingInfo",
			Handler:       _BusTrackingService_StreamBusTrackingInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/bustracking.proto",
}
